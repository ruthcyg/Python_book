# This version of Luminaflare will generate a list of exciting magical transformations. Let's try it out!

# The reimagined Luminaflare spell has been cast with the number 3, creating a fascinating sequence of magical transformations:

# [
# 3
# ,
# 4
# ,
# 5
# ,
# 3
# ,
# 4
# ,
# 7
# ,
# 3
# ,
# 4
# ,
# 11
# ]
# [3,4,5,3,4,7,3,4,11]

# This sequence is generated by taking each number from 0 up to 2 (since we used 3 as the input), and then applying the spell in the following way:

# Raise each number (0, 1, 2) to the power of 1, 2, and 3 respectively, and then add 3 to each result.
# The sequence unfolds as:
# 0^1 + 3 = 3
# 1^1 + 3 = 4
# 2^1 + 3 = 5
# 0^2 + 3 = 3
# 1^2 + 3 = 4
# 2^2 + 3 = 7
# 0^3 + 3 = 3
# 1^3 + 3 = 4
# 2^3 + 3 = 11
# Each step adds a layer of magic, transforming simple numbers into a mystical sequence! 

Luminaflare = lambda x: [i**n + x for n in range(1, x+1) for i in range(x)]

# Casting the Luminaflare spell with an example number
exciting_result = Luminaflare(3)
#Would you like to try the spell with another number?

print(exciting_result)

# this is my second spell, I  name it something that reflects its purpose and effect. I wanted to create a spell that turns an object into gold, and name it aurify, which means to make something golden. Then, I  create a simple lambda function that takes an object as an argument and returns the string “gold”. I would assign it to a variable with the same name as the spell:

aurify = lambda obj: "gold"
print(aurify("apple"))
